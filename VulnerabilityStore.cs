using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace containersec
{
    public static class VulnerabilityStore
    {
        private static readonly string METADATA_CHARS = "**";
        public static string GetFilename(ImageInfo image, ImageInfo parentImage)
        {
            var parentDigest = parentImage == null ? string.Empty : $"-{CleanDigest(parentImage.Digest)}";
            var filename = $"{CleanDigest(image.Digest)}{parentDigest}.txt";
            return filename;

            string CleanDigest(string digest)
            {
                return digest.Replace(':','_');
            }

        }

        public static bool Save(DirectoryInfo dir, ImageInfo image, ImageInfo parentImage, List<Vulnerability> vulnerabilities)
        {
            var date = DateTime.Now;
            var dateformat = $"{date.Year}-{date.Month}-{date.Day}";

            var filename = $"{GetFilename(image, parentImage)}";
            var file = Path.Combine(dir.FullName,filename);

            if (!dir.Exists)
            {
                dir.Create();
            }

            if (File.Exists(file))
            {
                return false;
            }

            using(var filestream = new StreamWriter(file))
            {
                filestream.WriteLine($"{METADATA_CHARS}{dateformat}");
                filestream.WriteLine($"{METADATA_CHARS}{image.Digest}");
                filestream.WriteLine($"{METADATA_CHARS}{image.Tag}");
                filestream.WriteLine($"{METADATA_CHARS}{image.TimeStamp}");

                var orderedVulnerabilities = vulnerabilities.OrderBy(v => v.vuln);

                foreach (var vulnerability in orderedVulnerabilities)
                {
                    filestream.WriteLine(vulnerability.vuln);
                }
            }

            return true;        
        }

        public static List<string> LoadVulnerabilitiesForDigest(DirectoryInfo dir, ImageInfo image, ImageInfo parentImage)
        {
            var filename = $"{GetFilename(image, parentImage)}";
            var file = Path.Combine(dir.FullName,filename);

            var vulnerabilities = new List<string>();
            var line = string.Empty;
            if (!File.Exists(file))
            {
                
            }
            var streamreader = new StreamReader(file);

            while ((line = streamreader.ReadLine() ) != null)
            {
                if (!line.StartsWith(METADATA_CHARS))
                {
                    vulnerabilities.Add(line);
                }
            }

            return vulnerabilities;
        }
    }   
}